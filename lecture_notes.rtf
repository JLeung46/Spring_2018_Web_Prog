{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red63\green63\blue63;\red249\green249\blue249;}
\margl1440\margr1440\vieww27120\viewh12600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 To Initialize NPM:\
\
\'91npm init\'92\
\
Should have something called package.json\
To install dependencies:\
\
\'91npm install bootstrap --save\'92\
\'91npm install popper --save\'92\
\
To run javascript file code (located in folder \'91server\'92):\
\
\'91node server/index.js\'92\
\
output: \'93Hello World\'94\
\
==============================================================\
\
express.js is the server\
\
index.html in the client\
\
NPM install dependencies onto the server\
\
================================================================\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 Nodemon\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 \'97\'97\'97\'97\'97\'97\'97\'97\
\
\
Install nodemon only on dev server\
\
\'91npm install nodemon --save-dev\'92\
\
\
Run local nodemon package\
 \
\'92npx nodemon server server/index.js\'92\
\
 The above line says - watch folder server and if anything changes, run server/index.js\
\
This starts the local host server and when you change sever/index.js and save it, the changes will automatically take place\
on the local server.\
\
\
Add a new script that runs on the server:\
\
Type \'94server": "nodemon server server/index.js" under \'93scripts\'94 in package.json\
\
Now in the terminal type: \
\
\'93npm run server\'94\
\
The command you just added under scripts will be run (local host server should start).\
\
=============================================================================\
\
Type Script\
\'97\'97\'97\'97\'97\'97\'97\'97\
\
typescriptlang.org\
\
\'91npm install \'97save-dev typescript\'92\
\
make a new folder called src\
\
make a file called 1st.ts\
\
run local package using npx\
\
\'92npx tsc src/1st.ts\'92\
\
Can delete above file after, just an example.\
\
===============================================================================\
\
ES 2015\
\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
MVC - Model View Controller\
\'97\'97\'97\'97\'97\'97\'97\'97\
\
Create a file called Model.ts in src to write functions for alerts.\
\
Create a file called Controller.ts in src to display alerts to user.\
\
The controller displays the messages to the user.\
\
compile the controller by typing:\
\
\'92npx tsc src/Controller.ts\'92\
\
which makes the js files.\
\
\
Install WebPack:\
\
\'93npm install web pack\'97save-dev\'94\
\
\'93npm install webpack-cli -D\'94\
\
Compile controller.js using web pack:\
\
\'93npx webpack src/controller.js --output dist/controller.js\'94\
\
\
==================================================================================\
\
INSTALL ANGULAR:\
\
sudo npm install @angular/cli -g\
\
Make A New Angular Project:\
\
ng new WhatDoYouMeme2\
\
copy over the required dependencies in the new package.son\
\
Take all files from the new project and copy it into the old project\
\
make sure to copy over the hidden file .angular-cli.json\
\
Everytime you change package.son remember to run npm install\
\
Run a server to recompile everything:\
\
\'93ng serve -o\'94\
\
Generate components in the src/app folder:\
\
ng generate component nav\
ng generate component messages\
ng generate component home\
ng generate component game\
\
\
Make a Nav Bar:\
\
In src/app/nav/nav.component.html\
\
Paste in the NavBar code\
\
Inside app.component.html:\
\
<app-nav></app-nav>\
<div class=\'93container\'94>\
	<app-messages></app-messages>\
	<app-home></app-home>\
</div>\
\
\
Add Bootstrap to styles:\
\
In .angular-cli.json:\
\
under \'93styles\'94\
\'93node_modules/bootstrap/dist/css/boostrap.css\'94\
\
The new nav bar should show up\
\
CTRL + C to kill the server\
\
========================================================================\
\
Inversion of Control (IOC):\
\
\
Dependency of Injection:\
\
app.module.ts pulls all the components together.\
\
\
\
Index.html\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
	AppComponent\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
			Nav\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
			Messages\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
			Home/Game\
\
\
Set Up Routing:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Import RouterModule in app.module.ts by typing:\
\
\'93import \{ RouterModule, Routes \} from '@angular/router\'92;\'94\
\
Under \'93imports\'94 type:\
\
    RouterModule.forRoot([\
      \{ path: 'home', component: HomeComponent\},\
      \{ path: 'game', component: GameComponent\},\
      \{ path: '', redirectTo: '/home', patchMatch: 'full'\}\
\
    ])\
\
In app.component.html add the Router Outlet:\
\
    <router-outlet></router-outlet>\
\
\
Add Router Link in nav.component.html to make pages load faster\
\
Replace href link to:\
\
routerLink:\
\
       <a class="nav-link" routerLink="/home">Home <span class="sr-only">(current)</span></a>\
\
To change the highlighting add routerLinkActive=\'91active\'92\
\
                <a class="nav-link" routerLink="/home" routerLinkActive='active'>Home <span class="sr-only">(current)</span></a>\
\
\
=================================================================================================\
\
Remove tslint:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
delete tslint.json\
\
npm uninstall tslint --save-dev\
\
In tsconfig.json type\
\
noImplicitAny: true\
\
\
\
Game Outline:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
cards in your hand - \'93My quotes\'94\
Players - \
Picture\
Played Quotes \
\
\
\
Create a new folder inside app called \'93models\'94\
\
Inside the models folder create a file called \'93game.ts\'94\
\
Insert your classes and stuff in here.\
\
Inside game.component.ts type\
\
	import \{ Game \} \'91from ../models/game\'92;\
\
  	Model = new Game();\
\
\
In game.component.html:\
\
	<div class=\'93row>\
		<div class =\'93col-md\'94>\
			My Quotes\
		</div>\
		<div class=\'93col-md-8\'94>\
			played Quotes\
			Picture\
		</div>\
		<div class=\'93col-md-4\'94\
			Other players\
		</div>\
	</div>\
\
==============================================================\
\
During Spring Break:\
\
Angular.io/guide\
\
Read template & Data Binding\
\
\
\
Move the foreach loop to My quotes and add the foreach loops to players and played quotes\
\
===================================================================\
\
*****************SERVER SIDE PROGRAMMING*********************\
\
In the server folder create a folder called Game\
\
Inside Game create model.js & controller.js\
\
Copy what\'92s inside SimpleController.js and paste it inside controller.js\
\
Add const game = require('.game/Controller');\
\
app.use('/simple', simple)\
	.use('/game', game)\
	.listen(port);\
\
to index.js\
\
Type:\
\
npm run server\
\
\
When you have a list of memes we want all the memes to be usable in different games so lets do this.\
\
Edit model.js:\
\
\
const QuotesStack = [\
\
\
];\
\
const PicturesStack = [\
\
\
];\
\
class Game\{\
	Players = [];\
	DealerId = '';\
\
	PlayedQuotes = [];\
	Picture = '';	\
\
\}\
\
===========================================================================================\
\
run the server: npm run server\
\
In Postman type: \cf2 \cb3 \expnd0\expndtw0\kerning0
http://localhost:8080/game/quotes\
\
npm i axios \'97save\
\
type: var axios = require("axios");\
\
at the top of model.js\
\
axios.get('https://api.imgflip.com/get_memes')\
  .then( response => PicturesStack = response.data.data.memes )\
\
\
=========================================================================================\
\
Inside SERVER/GAME:\
\
controller.js is where you put all the get and post requests - maps urls to actions where the actions are defined in Model\
\
index.js just sets up the server\
\
\cf0 \cb1 \kerning1\expnd0\expndtw0 model.js is where you define the functionality\
\
After post runs, it updates each player\
\
=========================================================================================\
Client Stuff\
\
game.component.ts is the client side code for running the game\
\
game.ts is just the models, a bunch of interfaces\
\
\'91ng serve -o\'92 runs the client side server\
\
================================================================================\
run client side code: ng serve -o\
run server side code: npm run server\
\
Initially there is no picture on the client\
After you send a picture post request on postman using the server side code\
The client server gets updated with the picture which will now show up\
\
The only time you send something to the server is during a post\
\
==============================================================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 \ul \ulc0 ADD A BUTTON TO FLIP PICTURE:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 \ulnone \
Inside game.component.html ADD THE BUTTON INTERFACE CODE:\
\
            <div class="card">\
                <img class="card-img" [src]="Model.Picture.url" />\
                <div class="card-img-overlay" style="text-align: center">\
                	<button class="btn btn-success btn-lg" (click)="flipPicture($event)">Flip Picture</button>\
	</div>\
\
Inside game.component.ts write the action code:\
\
  flipPicture(e: MouseEvent)\{\
    this.http.post(this._api + "/picture", \{\})\
      .subscribe();\
  \}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 \ul Add Middleware in Index.js SO THAT WE CAN LOAD STATIC FILES:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 \ulnone 	\
	const path = require('path');\
\
\
	.use('/', express.static(path.join(__dirname, "../dist/")))\
\
	\'85\
\
	.use('/', (req, res, next) => \{\
		res.sendFile(path.join(__dirname, "../dist/index.html"));\
	\})\
\
create a new folder called list\
\
build all angular code locally:\
\
npm run build\
\
New files should be created in dist\
\
=======================================================================\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 \ul SENDING INFORMATION:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 \ulnone In order to read the body from the request after submitting a quote, you need some middleware to parse the variables.\
\
So Install:\
\
\'92npm i body-parser \'97save\'92\
\
In index.js add the line:\
\
const bodyParser = require('body-parser');\
\
app\
	.use(bodyParser.json())\
	.use(bodyParser.urlencoded(\{ extended: false \}))\
\
So when Someone submits a quote we want to make a post request that updates the server with the submitted quote and the player ID of who submitted the quote.
\b \ul \
\

\b0 \ulnone Inside controller.js ADD THE LINES:\
\
    .post('/quotes', (req, res) => \{\
    	game.SubmitQuote(req.body.Text, req.body.Player.Id)\
    	res.send(game.FlipPicture())\
\
Inside game.component.ts UNDER SUBMITQUOTE(), ADD THE LINES:\
\
    this.http.post(this._api + "/quotes", \{ Text: text, PlayerId: this.Me.Name \})\
      .subscribe();\
\
REMEMBER THAT THE SERVER EXPECTS A QUOTE AND PLAYER ID WHICH IS WHY WE ADD THOSE IN THE ARGUMENTS\
\
SUBSCRIBE IS WHEN WE GET A RESPONSE AND WHAT U WANT TO DO WITH THE RESPONSE\
\
=======================================================================================\
\
game.ts is kind of useless because we don\'92t need all those initializations. The server does this for us.\
\
}